{"version":3,"sources":["assets/svg/loader.svg","assets/svg/like.svg","assets/svg/likeActive.svg","actions/SystemActions.js","history.js","ignore.js","services/HttpService.js","services/CacheService.js","services/TeamsService.js","actions/TeamsActions.js","cmps/teams/preview/TeamPreview.jsx","cmps/teams/TeamsList.jsx","cmps/error/ErrorHandler.jsx","pages/Home.jsx","App.js","reducers/TeamsReducers.js","reducers/SystemReducers.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["module","exports","doneLoading","type","errorHandler","error","history","createBrowserHistory","config","BASE_URL","axios","Axios","create","withCredentials","endpoint","params","data","ajax","a","method","url","headers","res","console","log","dir","response","status","push","getFromStorage","key","JSON","parse","localStorage","getItem","setInStorage","value","setItem","stringify","KEY","TeamsService","query","likeTeam","teams","_cache","teamId","foundTeam","find","team","team_id","foundIdx","findIndex","isLiked","splice","CacheService","Promise","resolve","HttpService","api","dataToRender","map","name","founded","logo","_setTeams","TeamPreview","props","className","alt","src","onClick","onLikeTeam","likeActive","like","TeamsList","ErrorHandler","this","Component","Home","id","loadTeams","system","isLoading","loader","mapDispatchToProps","dispatch","connect","state","App","initialState","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e256a5f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.16ce311f.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.3bc15b87.svg\";","module.exports = __webpack_public_path__ + \"static/media/likeActive.e565c18a.svg\";","export function loading() {\n    return { type: 'LOADING_START' }\n}\nexport function doneLoading() {\n    return { type: 'LOADING_DONE' }\n}\n\nexport function errorHandler(error){\n    return { type: 'SET_ERROR',\n            error }\n}","import { createBrowserHistory } from \"history\";\nconst history = createBrowserHistory();\n\nexport default history;","export const config = {\n    \"x-rapidapi-host\": \"api-football-v1.p.rapidapi.com\",\n    \"x-rapidapi-key\": \"c2691b0550mshfc448c9424facbap1c8955jsn66fe01aeeef8\",\n    \"useQueryString\": true\n}","import history from '../history';\nimport Axios from 'axios';\nimport {config} from '../ignore';\n\nconst BASE_URL = 'https://api-football-v1.p.rapidapi.com/v2/'\n\nvar axios = Axios.create({\n    withCredentials: true\n});\n\nexport default {\n    get(endpoint, params, data) {\n        return ajax(`${endpoint}`, 'GET', data , params)\n    },\n    post(endpoint, data) {\n        return ajax(endpoint, 'POST', data)\n    },\n    put(endpoint, data) {\n        return ajax(endpoint, 'PUT', data)\n    },\n    delete(endpoint, data) {\n        return ajax(endpoint, 'DELETE', data)\n    }\n}\n\n\nasync function ajax(endpoint, method = 'get', data = null, params = null) {\n    try {\n        const res = await axios({\n            url: `${BASE_URL}${endpoint}`,\n            method,\n            data,\n            params,\n            headers: config\n        })\n        return res.data;\n    } catch (err) {\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\n        console.dir(err);\n        if (err.response && err.response.status === 401) {\n            history.push('/');\n        }\n        throw err;\n    }\n}","function getFromStorage(key) {\n    return JSON.parse(localStorage.getItem(key));\n}\n\nfunction setInStorage(key, value) {\n    localStorage.setItem(key, JSON.stringify(value))\n}\n\nexport default {\n    getFromStorage,\n    setInStorage\n}","import HttpService from './HttpService';\nimport CacheService from './CacheService'\n\nconst KEY = 'teams';\n\nexport const TeamsService = {\n    query,\n    likeTeam\n}\nasync function query() {\n    const teams = _cache();\n    return teams;\n}\n\nasync function likeTeam(teamId){\n        const teams = await _cache();\n        const foundTeam = teams.find(team => team.team_id === teamId)\n        if(!foundTeam) throw 'Did not find team'\n        const foundIdx = teams.findIndex(team => team.team_id === teamId)\n        if(foundIdx < 0) throw 'Did not find team'\n        foundTeam.isLiked = !foundTeam.isLiked;\n        teams.splice(foundIdx, 1, foundTeam);\n        CacheService.setInStorage(KEY, teams);\n        return Promise.resolve(teams)\n}\n\nasync function _cache(){\n    const teams = CacheService.getFromStorage(KEY);\n    if(!teams){\n        const res = await HttpService.get('teams/league/94');\n        const {teams} = res.api\n        const dataToRender = teams.map(team=> {\n            const {team_id, name, founded, logo} = team;\n            return {team_id, name, founded, logo, isLiked: false}\n        })\n        CacheService.setInStorage(KEY, dataToRender)\n        return dataToRender;\n    }\n    return teams;\n\n}","import {loading, doneLoading, errorHandler} from './SystemActions';\nimport {TeamsService} from '../services/TeamsService';\n\nexport function loadTeams() {\n    return async dispatch => {\n      try {\n        dispatch(loading());\n        const teams = await TeamsService.query();\n        dispatch(_setTeams(teams));\n      } catch (err) {\n        dispatch(errorHandler(err))\n      } finally {\n        dispatch(doneLoading());\n      }\n    }\n}\n\nexport function likeTeam(teamId){\n  return async dispatch => {\n    try {\n      dispatch(loading());\n      const teams = await TeamsService.likeTeam(teamId);\n      dispatch(_setTeams(teams));\n    }catch(err){\n      dispatch(errorHandler(err))\n    }finally{\n      dispatch(doneLoading());\n    }\n  }\n}\n\nfunction _setTeams(teams){\n    return {\n        type: 'SET_TEAMS',\n        teams\n      };\n\n}\n","import React from \"react\";\nimport like from \"../../../assets/svg/like.svg\";\nimport likeActive from \"../../../assets/svg/likeActive.svg\";\n\nfunction TeamPreview(props) {\n  const { team } = props;\n  return (\n    <>\n      <div className=\"ratio-square\">\n        <img alt={team.logo} src={team.logo}></img>\n      </div>\n      <div className=\"flex align-center\">{team.name}</div>\n      <div className=\"flex align-center\">{team.founded}</div>\n      <div className=\"flex align-center like-container\">\n      <img\n        onClick={() => props.onLikeTeam(team.team_id)}\n        alt={`like ${team.name}`}\n        className=\"like\"\n        src={team.isLiked ? likeActive : like}\n      ></img>\n      </div>\n    </>\n  );\n}\n\nTeamPreview.propTypes = {};\n\nexport default TeamPreview;\n","import React from 'react'\nimport TeamPreview from './preview/TeamPreview'\n\nfunction TeamsList(props) {\n    return (\n        <ul className=\"teams-container\">\n         {  props.teams.teams && props.teams.teams.map(team => <li className=\"team-container clean-list grid\" key={team.team_id}><TeamPreview onLikeTeam={props.onLikeTeam} team={team}></TeamPreview></li>)}\n         </ul>\n    )\n}\n\nexport default TeamsList\n\n\n\n","import React, { Component } from 'react'\n\nexport class ErrorHandler extends Component {\n    render() {\n        return (\n            <div>\n                {JSON.stringify(this.props.error)}\n            </div>\n        )\n    }\n}\n\nexport default ErrorHandler\n\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { loadTeams, likeTeam } from \"../actions/TeamsActions\";\nimport { doneLoading } from \"../actions/SystemActions\";\nimport loader from '../assets/svg/loader.svg';\nimport TeamsList from \"../cmps/teams/TeamsList\";\nimport ErrorHandler from '../cmps/error/ErrorHandler';\n\nclass Home extends Component {\n  componentDidMount() {\n    this.props.loadTeams();\n  }\n\n  onLikeTeam = (id) =>{\n    this.props.likeTeam(id)\n  }\n\n  render() {\n    const { teams} = this.props;\n    const { isLoading, error } = this.props.system;\n    return (\n      <div className=\"main-container\">\n      {error &&<ErrorHandler error={error}></ErrorHandler>}\n       { teams &&<> <header className=\"header-container\">\n                    <ul className=\"grid clean-list\">\n                      <li>Crest</li>\n                      <li>Name</li>\n                      <li>Year Founded</li>\n                      <li>Mark as Favorite</li>\n                    </ul>\n                  </header>\n                  <TeamsList onLikeTeam={this.onLikeTeam} teams={teams}></TeamsList>\n                  </>}\n          {isLoading && <img alt=\"loader\" src={loader}></img>}\n        </div >\n      \n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    teams: state.team,\n    system: state.system\n  };\n};\n\nconst mapDispatchToProps = {\n  loadTeams,\n  doneLoading,\n  likeTeam\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from 'react';\nimport './App.css';\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n    teams : null\n}\n\nexport default function (state = initialState, action = {}) {\n    switch (action.type) {\n      case 'SET_TEAMS':\n        return { ...state, teams: action.teams };\n      default:\n        return state;\n    }\n  }","const initialState = {\n    isLoading: false,\n    error:null\n  };\n  \n  export default function (state = initialState, action = {}) {\n    switch (action.type) {\n      case 'LOADING_START':\n        return { ...state, isLoading: true };\n      case 'LOADING_DONE':\n        return { ...state, isLoading: false };\n      case 'SET_ERROR':\n        return{...state, error: action.error}\n      default: return state;\n    }\n  }","import { combineReducers } from 'redux';\nimport TeamsReducer from './TeamsReducers';\nimport SystemReducer from './SystemReducers';\n\nconst rootReducer = combineReducers({\n  system: SystemReducer,\n  team: TeamsReducer,\n\n})\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\n\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst Store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default Store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}